
'''
为了将单独的短语, 重新放回单词内容中, 我们需要先创建一个字典, 词头就是'键', 其他从词性到</>的内容块,统统是'值'. 这样, 我们就能从这个字典的键值对中, 来快速查找到短语内容, 并插入新的完整词典中.

步骤:
1. 调用带有日文标签的txt词典
2. 将每个单词块的内容变成一行,去掉内部的断行符

3. 正则匹配, 词头到'键'.
   或者直接判断如果行首是以'あ'开头的,就是词头,就是'键'

4. 正则匹配, 剩余部分到'值'.
   或者直接判断行,非'あ'开头的行,都是'值'的部分,将其添加到一个'值'列表中

5. 将这个字典数据,腌制到新的txt文件,方便我们以后调用


adict.items() 返回一个包含所有（键，值）元祖的列表；


'''

import pickle

l老文件名 = r'f:\02 日文每一行.txt'
x新文件名 = r'f:\实验.txt'

腌制文件名 = r'f:\09 腌制字典.txt'
计数器 = 0

f = open(l老文件名,'r',encoding='utf-8')
new_f = open(x新文件名,'w+',encoding='utf-8')

字典_待腌制 = {}
键 = ''
值 = ''
值_列表 = []   # 用来存放每个单词的'值',该'值'是一个列表, 列表中的每一个元素就是每一行,分别代表词性,中英文释义,例句等.



def 函数_打印字典中的键值对_以列表形式(字典):
    my_list = 字典.items()   # adict.items() 返回一个包含所有（键，值）元祖的列表
    for i in my_list:  # 打印出列表中的每一个元素
        print(i)  # 注意:字典是无序的,所以从字典返回列表后打印出的也是无序的

def 函数_腌制数据(字典):
    文件对象_将腌制存储 = open(腌制文件名,'wb')  # b是二进制模式,wb是以二进制模式写入
    pickle.dump(字典,文件对象_将腌制存储)
    文件对象_将腌制存储.close()


def 函数_读取腌制(文件名):
    文件对象_读取腌制 = open(腌制文件名,'rb') #以二进制模式读取
    结果 = pickle.load(文件对象_读取腌制)
    return 结果


for line in f:
    if not line.startswith('_____'):
        if line.startswith('あ'):
            键 = line
        else:
            值_列表.append(line)
    elif line.startswith('_____'):
        # print(值_列表)  # 此处打印正确, 所有的 值_列表 都是对的
        深拷贝列表2 = 值_列表[:]  #千万注意!!! 此处必须先深拷贝一个 值_列表.  否则如果直接写成 '字典_待腌制[键] = 值_列表' 语句,事实上是将一个指针引用赋给了字典中的'值',会导致以后的操作直接修改字典中这个'值',会出错!
        字典_待腌制[键] = 深拷贝列表2   # 将键值对加入进腌制字典中
        值_列表.clear()
        计数器 += 1  #计数器表明当前一共处理到到几个词头
        print(计数器)


# 函数_打印字典中的键值对_以列表形式(字典_待腌制)
函数_腌制数据(字典_待腌制)


# 读取腌制的数据 = 函数_读取腌制(r'f:\腌制字典.txt')
# print(读取腌制的数据)



























